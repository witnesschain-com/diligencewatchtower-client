/*
	Copyright (c) 2024 Kaleidoscope Blockchain Inc.

	Unless specified otherwise, this work is licensed under the Creative Commons
	Attribution-NonCommercial 4.0 International License.

	To view a copy of this license, visit:
		http://creativecommons.org/licenses/by-nc/4.0/
*/

package opchain

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
)

type OptimismNodeOutputStruct struct {
	Jsonrpc string `json:"jsonrpc"`
	ID      int    `json:"id"`
	Result  struct {
		Version    string `json:"version"`
		OutputRoot string `json:"outputRoot"`
		BlockRef   struct {
			Hash       string `json:"hash"`
			Number     int    `json:"number"`
			ParentHash string `json:"parentHash"`
			Timestamp  int    `json:"timestamp"`
			L1Origin   struct {
				Hash   string `json:"hash"`
				Number int    `json:"number"`
			} `json:"l1origin"`
			SequenceNumber int `json:"sequenceNumber"`
		} `json:"blockRef"`
		WithdrawalStorageRoot string `json:"withdrawalStorageRoot"`
		StateRoot             string `json:"stateRoot"`
		SyncStatus            struct {
			CurrentL1 struct {
				Hash       string `json:"hash"`
				Number     int    `json:"number"`
				ParentHash string `json:"parentHash"`
				Timestamp  int    `json:"timestamp"`
			} `json:"current_l1"`
			CurrentL1Finalized struct {
				Hash       string `json:"hash"`
				Number     int    `json:"number"`
				ParentHash string `json:"parentHash"`
				Timestamp  int    `json:"timestamp"`
			} `json:"current_l1_finalized"`
			HeadL1 struct {
				Hash       string `json:"hash"`
				Number     int    `json:"number"`
				ParentHash string `json:"parentHash"`
				Timestamp  int    `json:"timestamp"`
			} `json:"head_l1"`
			SafeL1 struct {
				Hash       string `json:"hash"`
				Number     int    `json:"number"`
				ParentHash string `json:"parentHash"`
				Timestamp  int    `json:"timestamp"`
			} `json:"safe_l1"`
			FinalizedL1 struct {
				Hash       string `json:"hash"`
				Number     int    `json:"number"`
				ParentHash string `json:"parentHash"`
				Timestamp  int    `json:"timestamp"`
			} `json:"finalized_l1"`
			UnsafeL2 struct {
				Hash       string `json:"hash"`
				Number     int    `json:"number"`
				ParentHash string `json:"parentHash"`
				Timestamp  int    `json:"timestamp"`
				L1Origin   struct {
					Hash   string `json:"hash"`
					Number int    `json:"number"`
				} `json:"l1origin"`
				SequenceNumber int `json:"sequenceNumber"`
			} `json:"unsafe_l2"`
			SafeL2 struct {
				Hash       string `json:"hash"`
				Number     int    `json:"number"`
				ParentHash string `json:"parentHash"`
				Timestamp  int    `json:"timestamp"`
				L1Origin   struct {
					Hash   string `json:"hash"`
					Number int    `json:"number"`
				} `json:"l1origin"`
				SequenceNumber int `json:"sequenceNumber"`
			} `json:"safe_l2"`
			FinalizedL2 struct {
				Hash       string `json:"hash"`
				Number     int    `json:"number"`
				ParentHash string `json:"parentHash"`
				Timestamp  int    `json:"timestamp"`
				L1Origin   struct {
					Hash   string `json:"hash"`
					Number int    `json:"number"`
				} `json:"l1origin"`
				SequenceNumber int `json:"sequenceNumber"`
			} `json:"finalized_l2"`
			QueuedUnsafeL2 struct {
				Hash       string `json:"hash"`
				Number     int    `json:"number"`
				ParentHash string `json:"parentHash"`
				Timestamp  int    `json:"timestamp"`
				L1Origin   struct {
					Hash   string `json:"hash"`
					Number int    `json:"number"`
				} `json:"l1origin"`
				SequenceNumber int `json:"sequenceNumber"`
			} `json:"queued_unsafe_l2"`
		} `json:"syncStatus"`
	} `json:"result"`
}

type OutputProposed struct {
	OutputRoot    string
	L2OutputIndex string
	L2BlockNumber *big.Int
	L1Timestamp   string
}

// Log represents a contract log event. These events are generated by the LOG opcode and
// stored/indexed by the node.
type Log struct {
	// Consensus fields:
	// address of the contract that generated the event
	Address common.Address `json:"address" gencodec:"required"`
	// list of topics provided by the contract.
	Topics []common.Hash `json:"topics" gencodec:"required"`
	// supplied by the contract, usually ABI-encoded
	Data []byte `json:"data" gencodec:"required"`

	// Derived fields. These fields are filled in by the node
	// but not secured by consensus.
	// block in which the transaction was included
	BlockNumber uint64 `json:"blockNumber" rlp:"-"`
	// hash of the transaction
	TxHash common.Hash `json:"transactionHash" gencodec:"required" rlp:"-"`
	// index of the transaction in the block
	TxIndex uint `json:"transactionIndex" rlp:"-"`
	// hash of the block in which the transaction was included
	BlockHash common.Hash `json:"blockHash" rlp:"-"`
	// index of the log in the block
	Index uint `json:"logIndex" rlp:"-"`

	// The Removed field is true if this log was reverted due to a chain reorganisation.
	// You must pay attention to this field if you receive logs through a filter query.
	Removed bool `json:"removed" rlp:"-"`
}

// Receipt represents the results of a transaction.
type TransactionReceipt struct {
	// Consensus fields: These fields are defined by the Yellow Paper
	Type              uint8  `json:"type,omitempty"`
	PostState         []byte `json:"root"`
	Status            uint64 `json:"status"`
	CumulativeGasUsed uint64 `json:"cumulativeGasUsed" gencodec:"required"`
	Bloom             Bloom  `json:"logsBloom"         gencodec:"required"`
	Logs              []*Log `json:"logs"              gencodec:"required"`

	// Implementation fields: These fields are added by geth when processing a transaction or retrieving a receipt.
	// gencodec annotated fields: these are stored in the chain database.
	TxHash            common.Hash    `json:"transactionHash" gencodec:"required"`
	ContractAddress   common.Address `json:"contractAddress"`
	GasUsed           uint64         `json:"gasUsed" gencodec:"required"`
	EffectiveGasPrice *big.Int       `json:"effectiveGasPrice"` // required, but tag omitted for backwards compatibility
	BlobGasUsed       uint64         `json:"blobGasUsed,omitempty"`
	BlobGasPrice      *big.Int       `json:"blobGasPrice,omitempty"`

	// DepositNonce was introduced in Regolith to store the actual nonce used by deposit transactions
	// The state transition process ensures this is only set for Regolith deposit transactions.
	DepositNonce *uint64 `json:"depositNonce,omitempty"`
	// DepositReceiptVersion was introduced in Canyon to indicate an update to how receipt hashes
	// should be computed when set. The state transition process ensures this is only set for
	// post-Canyon deposit transactions.
	DepositReceiptVersion *uint64 `json:"depositReceiptVersion,omitempty"`

	// Inclusion information: These fields provide information about the inclusion of the
	// transaction corresponding to this receipt.
	BlockHash        common.Hash `json:"blockHash,omitempty"`
	BlockNumber      *big.Int    `json:"blockNumber,omitempty"`
	TransactionIndex uint        `json:"transactionIndex"`

	// OVM legacy: extend receipts with their L1 price (if a rollup tx)
	L1GasPrice *big.Int   `json:"l1GasPrice,omitempty"`
	L1GasUsed  *big.Int   `json:"l1GasUsed,omitempty"`
	L1Fee      *big.Int   `json:"l1Fee,omitempty"`
	FeeScalar  *big.Float `json:"l1FeeScalar,omitempty"` // always nil after Ecotone hardfork
}
